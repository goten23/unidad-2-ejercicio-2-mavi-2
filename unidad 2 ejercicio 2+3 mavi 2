import pygame
from Box2D import b2

# Configuración de Pygame
PPM = 32  # Píxeles por metro
TARGET_FPS = 60
TIME_STEP = 1.0 / TARGET_FPS

# Crear el mundo de Box2D
world = b2.world(gravity=(0, -10), doSleep=True)

# Crear las barreras
borders = [
    # Bordes izquierdo y derecho
    (b2.polygonShape(box=(1, 30)), (0, 15), (0, 0)),
    (b2.polygonShape(box=(1, 30)), (40, 15), (0, 0)),
    # Bordes superior e inferior
    (b2.polygonShape(box=(20, 1)), (20, 0), (0, 0)),
    (b2.polygonShape(box=(20, 1)), (20, 30), (0, 0)),
]

for shape, position, linear_velocity in borders:
    body = world.CreateStaticBody(
        position=position,
        shapes=shape,
    )

# Crear los obstáculos estáticos
obstacles = [
    ((4, 3), (5, 5)),
    ((15, 12), (17, 14)),
    ((25, 6), (28, 8))
]

for obstacle in obstacles:
    shape = b2.polygonShape(box=((obstacle[1][0] - obstacle[0][0]) / 2, (obstacle[1][1] - obstacle[0][1]) / 2))
    position = ((obstacle[0][0] + obstacle[1][0]) / 2, (obstacle[0][1] + obstacle[1][1]) / 2)
    world.CreateStaticBody(
        position=position,
        shapes=shape
    )

# Crear la pelota
ball_body = world.CreateDynamicBody(
    position=(2, 15),
    fixtures=b2.fixtureDef(
        shape=b2.circleShape(radius=1),
        density=1.0,
        friction=0.3,
        restitution=1.0,  # Coeficiente de restitución máximo para el rebote perfecto
    ),
)

# Configuración de Pygame
pygame.init()
screen = pygame.display.set_mode((800, 600))
clock = pygame.time.Clock()

# Loop de simulación
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Avanzar la simulación en el tiempo
    world.Step(TIME_STEP, 6, 2)

    # Limpiar la pantalla
    screen.fill((255, 255, 255))

    # Dibujar los bordes
    for shape, position, _ in borders:
        vertices = [(position[0] + v[0], position[1] + v[1]) for v in shape.vertices]
        pygame.draw.polygon(screen, (0, 0, 0), vertices)

    # Dibujar los obstáculos
    for obstacle in obstacles:
        pygame.draw.rect(screen, (0, 0, 0), pygame.Rect(obstacle[0], (obstacle[1][0] - obstacle[0][0], obstacle[1][1] - obstacle[0][1])))

    # Dibujar la pelota
    ball_position = ball_body.transform * ball_body.fixtures[0].shape.pos * PPM
    pygame.draw.circle(screen, (255, 0, 0), (int(ball_position[0]), int(600 - ball_position[1])), int(ball_body.fixtures[0].shape.radius * PPM))

    # Actualizar la pantalla
    pygame.display.flip()
    clock.tick(TARGET_FPS)

pygame.quit()
